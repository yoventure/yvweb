{"ast":null,"code":"var _jsxFileName = \"/Users/connieshi/Documents/YoVenture_WebApp/frontend/src/pages/ChatPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useUser } from '../UserContext'; // 引入 useUser\nimport ChatContent from '../components/Chat/ChatContent';\nimport ChatInput from '../components/Chat/ChatInput';\nimport ChatList from '../components/Chat/ChatList';\nimport './ChatPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatPage() {\n  _s();\n  const [sessions, setSessions] = useState([]);\n  const [currentSession, setCurrentSession] = useState(null);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [showItinerary, setShowItinerary] = useState(false); // State to manage showing/hiding itinerary\n  const {\n    user\n  } = useUser(); // 获取用户信息\n  const userId = user === null || user === void 0 ? void 0 : user.userId; // 获取 userId\n  const password = user === null || user === void 0 ? void 0 : user.password; // 获取 userPassword\n\n  useEffect(() => {\n    const fetchSessions = async () => {\n      try {\n        console.log('user_id', user === null || user === void 0 ? void 0 : user.userId);\n        console.log('password', user === null || user === void 0 ? void 0 : user.password);\n        const response = await fetch('/yv-get-user-sessions', {\n          method: 'POST',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            \"user_id\": userId,\n            \"password\": password,\n            \"passwordcheck\": 1\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`Failed to fetch sessions: ${response.status}`);\n        }\n        const data = await response.json();\n        if (data.status === 'success') {\n          const sortedSessions = data.sessions.sort((a, b) => new Date(b.date) - new Date(a.date));\n          setSessions(sortedSessions);\n        } else {\n          throw new Error(`Failed to fetch sessions: ${data.message}`);\n        }\n      } catch (error) {\n        console.error('Error fetching sessions:', error);\n      }\n    };\n    fetchSessions();\n  }, [userId, password]);\n  const selectSession = async session => {\n    setCurrentSession(session);\n    try {\n      const response = await fetch(`/yv-get-session-history/${session.session_id}`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to fetch session history: ${response.status}`);\n      }\n      const data = await response.json();\n      setChatHistory(data.history);\n    } catch (error) {\n      console.error('Error fetching session history:', error);\n    }\n  };\n  const sendMessage = async message => {\n    if (!currentSession) {\n      console.error('No session selected');\n      return;\n    }\n    const newMessage = {\n      message,\n      date: new Date(),\n      isUser: true\n    };\n    const updatedHistory = [...chatHistory, newMessage];\n    setChatHistory(updatedHistory);\n    updateSessionHistory(updatedHistory);\n    const apiUrl = '/yv-query-stream'; // 将要请求的URL存储在变量中\n\n    try {\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user_id: userId,\n          // 替换为实际的用户ID\n          session_id: currentSession.session_id,\n          // 使用当前选择的会话ID\n          query: message\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.text();\n      const aiResponse = {\n        message: data,\n        // Adjust according to the actual response structure\n        date: new Date(),\n        isUser: false\n      };\n      setChatHistory(prevHistory => [...prevHistory, aiResponse]);\n      updateSessionHistory([...updatedHistory, aiResponse]);\n\n      // Check for itinerary trigger in AI response (example condition)\n      if (data.includes('place of interest') || data.includes('itinerary')) {\n        setShowItinerary(true); // Show itinerary container on specific triggers\n      }\n    } catch (error) {\n      console.error('Error fetching AI response:', error);\n    }\n  };\n  const updateSessionHistory = updatedHistory => {\n    const updatedSession = {\n      ...currentSession,\n      history: updatedHistory,\n      lastUpdated: new Date()\n    };\n    setSessions(prevSessions => prevSessions.map(session => session.id === updatedSession.id ? updatedSession : session).sort((a, b) => new Date(b.lastUpdated) - new Date(a.lastUpdated)) // Sort sessions by lastUpdated in descending order\n    );\n  };\n  const startNewChat = async () => {\n    const apiUrl = '/yv-new-session'; // 将要请求的URL存储在变量中\n    try {\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user_id: userId,\n          // 替换为实际的用户ID\n          topic: ''\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const newSession = {\n        id: data.session_id,\n        summary: 'New Chat',\n        lastUpdated: new Date(),\n        history: []\n      };\n      setSessions([newSession, ...sessions].sort((a, b) => new Date(b.lastUpdated) - new Date(a.lastUpdated)));\n      setCurrentSession(newSession);\n      setChatHistory([]);\n      setShowItinerary(false); // Reset itinerary view on new chat\n    } catch (error) {\n      console.error('Error creating new session:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-list\",\n      children: /*#__PURE__*/_jsxDEV(ChatList, {\n        sessions: sessions,\n        selectSession: selectSession,\n        startNewChat: startNewChat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-conversation\",\n      children: [/*#__PURE__*/_jsxDEV(ChatContent, {\n        chatHistory: chatHistory\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n        sendMessage: sendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), showItinerary && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"itinerary-container\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Itinerary Visualization\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatPage, \"QG5jYz2Jory1NKZF0GMq4Vh0zEI=\", false, function () {\n  return [useUser];\n});\n_c = ChatPage;\nexport default ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useState","useEffect","useUser","ChatContent","ChatInput","ChatList","jsxDEV","_jsxDEV","ChatPage","_s","sessions","setSessions","currentSession","setCurrentSession","chatHistory","setChatHistory","showItinerary","setShowItinerary","user","userId","password","fetchSessions","console","log","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","sortedSessions","sort","a","b","Date","date","message","error","selectSession","session","session_id","history","sendMessage","newMessage","isUser","updatedHistory","updateSessionHistory","apiUrl","user_id","query","text","aiResponse","prevHistory","includes","updatedSession","lastUpdated","prevSessions","map","id","startNewChat","topic","newSession","summary","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/connieshi/Documents/YoVenture_WebApp/frontend/src/pages/ChatPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useUser } from '../UserContext'; // 引入 useUser\nimport ChatContent from '../components/Chat/ChatContent';\nimport ChatInput from '../components/Chat/ChatInput';\nimport ChatList from '../components/Chat/ChatList';\nimport './ChatPage.css';\n\nfunction ChatPage() {\n  const [sessions, setSessions] = useState([]);\n  const [currentSession, setCurrentSession] = useState(null);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [showItinerary, setShowItinerary] = useState(false); // State to manage showing/hiding itinerary\n  const { user } = useUser(); // 获取用户信息\n  const userId = user?.userId; // 获取 userId\n  const password = user?.password; // 获取 userPassword\n  \n  useEffect(() => {\n\n    const fetchSessions = async () => {\n      try {\n        console.log('user_id', user?.userId);\n        console.log('password', user?.password);\n        const response = await fetch('/yv-get-user-sessions', {\n          method: 'POST',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            \"user_id\": userId,\n            \"password\": password,\n            \"passwordcheck\": 1,\n          })\n        });\n\n        if (!response.ok) {\n          throw new Error(`Failed to fetch sessions: ${response.status}`);\n        }\n\n        const data = await response.json();\n        if (data.status === 'success') {\n          const sortedSessions = data.sessions.sort((a, b) => new Date(b.date) - new Date(a.date));\n          setSessions(sortedSessions);\n        } else {\n          throw new Error(`Failed to fetch sessions: ${data.message}`);\n        }\n      } catch (error) {\n        console.error('Error fetching sessions:', error);\n      }\n    };\n    fetchSessions();\n  }, [userId, password]);\n\n  const selectSession = async (session) => {\n    setCurrentSession(session);\n    try {\n      const response = await fetch(`/yv-get-session-history/${session.session_id}`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch session history: ${response.status}`);\n      }\n\n      const data = await response.json();\n      setChatHistory(data.history);\n    } catch (error) {\n      console.error('Error fetching session history:', error);\n    }\n  };\n\n  const sendMessage = async (message) => {\n    if (!currentSession) {\n      console.error('No session selected');\n      return;\n    }\n\n    const newMessage = { message, date: new Date(), isUser: true };\n    const updatedHistory = [...chatHistory, newMessage];\n    setChatHistory(updatedHistory);\n    updateSessionHistory(updatedHistory);\n\n    const apiUrl = '/yv-query-stream'; // 将要请求的URL存储在变量中\n\n    try {\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'accept': 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          user_id: userId, // 替换为实际的用户ID\n          session_id: currentSession.session_id, // 使用当前选择的会话ID\n          query: message,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.text();\n      const aiResponse = {\n        message: data, // Adjust according to the actual response structure\n        date: new Date(),\n        isUser: false,\n      };\n\n      setChatHistory((prevHistory) => [...prevHistory, aiResponse]);\n      updateSessionHistory([...updatedHistory, aiResponse]);\n\n      // Check for itinerary trigger in AI response (example condition)\n      if (data.includes('place of interest') || data.includes('itinerary')) {\n        setShowItinerary(true); // Show itinerary container on specific triggers\n      }\n    } catch (error) {\n      console.error('Error fetching AI response:', error);\n    }\n  };\n\n  const updateSessionHistory = (updatedHistory) => {\n    const updatedSession = {\n      ...currentSession,\n      history: updatedHistory,\n      lastUpdated: new Date(),\n    };\n    setSessions((prevSessions) =>\n      prevSessions\n        .map((session) =>\n          session.id === updatedSession.id ? updatedSession : session\n        )\n        .sort((a, b) => new Date(b.lastUpdated) - new Date(a.lastUpdated)) // Sort sessions by lastUpdated in descending order\n    );\n  };\n\n\n  const startNewChat = async () => {\n    const apiUrl = '/yv-new-session'; // 将要请求的URL存储在变量中\n    try {\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'accept': 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          user_id: userId, // 替换为实际的用户ID\n          topic: '',\n        }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const newSession = {\n        id: data.session_id, \n        summary: 'New Chat',\n        lastUpdated: new Date(),\n        history: [],\n      };\n      setSessions([newSession, ...sessions].sort((a, b) => new Date(b.lastUpdated) - new Date(a.lastUpdated)));\n      setCurrentSession(newSession);\n      setChatHistory([]);\n      setShowItinerary(false); // Reset itinerary view on new chat\n    } catch (error) {\n    console.error('Error creating new session:', error);\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"chat-list\">\n        <ChatList sessions={sessions} selectSession={selectSession} startNewChat={startNewChat} />\n      </div>\n      <div className=\"chat-conversation\">\n        <ChatContent chatHistory={chatHistory} />\n        <ChatInput sendMessage={sendMessage} />\n      </div>\n      {showItinerary && (\n        <div className=\"itinerary-container\">\n          {/* Render your itinerary visualization component here */}\n          <h3>Itinerary Visualization</h3>\n          {/* Add your itinerary visualization content based on the ongoing conversation */}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default ChatPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}