{"ast":null,"code":"import React,{useState}from'react';import{useNavigate}from'react-router-dom';import{useUser}from'../UserContext';// 引入 useUser\nimport'./LoginPage.css';// const bcrypt = require('bcryptjs'); // 引入 bcryptjs 库\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const apiUrl=process.env.REACT_APP_API_URL;function LoginPage(_ref){let{setIsLoggedIn,setUserSessions}=_ref;// Destructure the prop correctly\nconst[email,setEmail]=useState('');const[password,setPassword]=useState('');const[error,setError]=useState('');const navigate=useNavigate();const{setUser}=useUser();// 获取 setUser 函数\nconst handleLogin=async()=>{console.log('api-pre',apiUrl);try{const response=await fetch(\"\".concat(apiUrl,\"/login\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email,password})});if(response.ok){setIsLoggedIn(true);// Set the login state to true upon successful login\nsetUser({userId:email,password:password});// 存储用户信息\n// console.log('user_id',email)\n// console.log('password',password)\n// const hashedPassword = bcrypt.hashSync(password, 10); // 10 是 saltRounds，用于生成 salt\n// console.log('password',hashedPassword)\nconst sessionResponse=await fetch('/yv-get-user-sessions',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({\"user_id\":email,\"password\":password,\"passwordcheck\":1})});if(sessionResponse.data.status==='success'){setUserSessions(sessionResponse.data.sessions);}else{alert('Failed to get user sessions');}navigate('/');}else{const errorData=await response.json();setError(errorData.message);}}catch(error){console.error('Error:',error);setError('Server error. Please try again later.');}};return/*#__PURE__*/_jsxs(\"div\",{className:\"login-page\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Login\"}),error&&/*#__PURE__*/_jsx(\"div\",{className:\"error-message\",children:error}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Email:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"email\",value:email,onChange:e=>setEmail(e.target.value)})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Password:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",value:password,onChange:e=>setPassword(e.target.value)})]}),/*#__PURE__*/_jsx(\"button\",{onClick:handleLogin,children:\"Login\"})]});}export default LoginPage;","map":{"version":3,"names":["React","useState","useNavigate","useUser","jsx","_jsx","jsxs","_jsxs","apiUrl","process","env","REACT_APP_API_URL","LoginPage","_ref","setIsLoggedIn","setUserSessions","email","setEmail","password","setPassword","error","setError","navigate","setUser","handleLogin","console","log","response","fetch","concat","method","headers","body","JSON","stringify","ok","userId","sessionResponse","data","status","sessions","alert","errorData","json","message","className","children","type","value","onChange","e","target","onClick"],"sources":["/Users/connieshi/Documents/YoVenture_WebApp/frontend/src/pages/LoginPage.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useUser } from '../UserContext'; // 引入 useUser\nimport './LoginPage.css';\n// const bcrypt = require('bcryptjs'); // 引入 bcryptjs 库\nconst apiUrl = process.env.REACT_APP_API_URL;\n\nfunction LoginPage({ setIsLoggedIn, setUserSessions }) { // Destructure the prop correctly\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const navigate = useNavigate();\n  const { setUser } = useUser(); // 获取 setUser 函数\n\n  const handleLogin = async () => {\n    console.log('api-pre',apiUrl)\n    try {\n      const response = await fetch(`${apiUrl}/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ email, password })\n      });\n\n      if (response.ok) {\n        setIsLoggedIn(true); // Set the login state to true upon successful login\n        setUser({ userId: email,password: password  }); // 存储用户信息\n        // console.log('user_id',email)\n        // console.log('password',password)\n        // const hashedPassword = bcrypt.hashSync(password, 10); // 10 是 saltRounds，用于生成 salt\n        // console.log('password',hashedPassword)\n        const sessionResponse = await fetch('/yv-get-user-sessions', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            \"user_id\": email,\n            \"password\": password,\n            \"passwordcheck\": 1})\n        });\n        if (sessionResponse.data.status === 'success') {\n          setUserSessions(sessionResponse.data.sessions);\n        } else {\n          alert('Failed to get user sessions');\n        }\n        navigate('/');\n\n      } else {\n        const errorData = await response.json();\n        setError(errorData.message);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      setError('Server error. Please try again later.');\n    }\n  };\n\n  return (\n    <div className=\"login-page\">\n      <h2>Login</h2>\n      {error && <div className=\"error-message\">{error}</div>}\n      <div>\n        <label>Email:</label>\n        <input type=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} />\n      </div>\n      <div>\n        <label>Password:</label>\n        <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} />\n      </div>\n      <button onClick={handleLogin}>Login</button>\n    </div>\n  );\n}\n\nexport default LoginPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}