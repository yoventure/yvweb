{"ast":null,"code":"import React,{useState,useEffect,useCallback}from'react';import{useUser}from'../UserContext';// 引入 useUser\nimport ChatContent from'../components/Chat/ChatContent';import ChatInput from'../components/Chat/ChatInput';import ChatList from'../components/Chat/ChatList';import'./ChatPage.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function ChatPage(){const[sessions,setSessions]=useState([]);const[currentSession,setCurrentSession]=useState(null);const[chatHistory,setChatHistory]=useState([]);const[showItinerary,setShowItinerary]=useState(false);// State to manage showing/hiding itinerary\nconst{user}=useUser();// 获取用户信息\nconst userId=user===null||user===void 0?void 0:user.userId;// 获取 userId\nconst password=user===null||user===void 0?void 0:user.password;// 获取 userPassword\nconst fetchSessions=useCallback(async()=>{try{console.log('user_id',user);console.log('password',user===null||user===void 0?void 0:user.password);const response=await fetch('/yv-get-user-sessions',{method:'POST',headers:{'Accept':'application/json','Content-Type':'application/json'},body:JSON.stringify({\"user_id\":userId,\"password\":password,\"passwordcheck\":1})});if(!response.ok){throw new Error(\"Failed to fetch sessions: \".concat(response.status));}const data=await response.json();if(data.status==='success'){const sortedSessions=data.sessions.map(session=>({...session,date:new Date(session.date)})).sort((a,b)=>b.date-a.date);setSessions(sortedSessions);}else{throw new Error(\"Failed to fetch sessions: \".concat(data.message));}}catch(error){console.error('Error fetching sessions:',error);}},[userId,password,user]);useEffect(()=>{fetchSessions();},[fetchSessions]);const selectSession=async session=>{setCurrentSession(session);console.log('session_id',session.session_id);try{const response=await fetch(\"/yv-focus-session\",{method:'POST',headers:{'Accept':'application/json','Content-Type':'application/json'},body:JSON.stringify({\"user_id\":userId,\"session_id\":session.session_id})});if(!response.ok){throw new Error(\"Failed to fetch session history: \".concat(response.status));}const data=await response.json();console.log('message',data[\"messages\"]);setChatHistory(data[\"messages\"]);fetchSessions();// 选择会话时重新获取会话列表\n}catch(error){console.error('Error fetching session history:',error);}};const sendMessage=async message=>{if(!currentSession){console.error('No session selected');return;}const newMessage={message,date:new Date(),isUser:true};const updatedHistory=[...chatHistory,newMessage];setChatHistory(updatedHistory);updateSessionHistory(updatedHistory);const apiUrl='/yv-query-stream';// 将要请求的URL存储在变量中\ntry{const response=await fetch(apiUrl,{method:'POST',headers:{'accept':'application/json','Content-Type':'application/json'},body:JSON.stringify({user_id:userId,// 替换为实际的用户ID\nsession_id:currentSession.session_id,// 使用当前选择的会话ID\nquery:message})});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const data=await response.text();const aiResponse={message:data,// Adjust according to the actual response structure\ndate:new Date(),isUser:false};setChatHistory(prevHistory=>[...prevHistory,aiResponse]);updateSessionHistory([...updatedHistory,aiResponse]);// Check for itinerary trigger in AI response (example condition)\nif(data.includes('place of interest')||data.includes('itinerary')){setShowItinerary(true);// Show itinerary container on specific triggers\n}}catch(error){console.error('Error fetching AI response:',error);}};const updateSessionHistory=updatedHistory=>{const updatedSession={...currentSession,history:updatedHistory,lastUpdated:new Date()};setSessions(prevSessions=>prevSessions.map(session=>session.id===updatedSession.id?updatedSession:session).sort((a,b)=>new Date(b.lastUpdated)-new Date(a.lastUpdated))// Sort sessions by lastUpdated in descending order\n);};const startNewChat=async()=>{const apiUrl='/yv-new-session';// 将要请求的URL存储在变量中\ntry{const response=await fetch(apiUrl,{method:'POST',headers:{'accept':'application/json','Content-Type':'application/json'},body:JSON.stringify({user_id:userId,// 替换为实际的用户ID\ntopic:''})});const data=await response.json();if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const newSession={session_id:data.session_id,date:new Date().toISOString(),topic:''};setSessions(prevSessions=>[newSession,...prevSessions].sort((a,b)=>new Date(b.date)-new Date(a.date)));setCurrentSession(newSession);setChatHistory([]);setShowItinerary(false);// Reset itinerary view on new chat\n}catch(error){console.error('Error creating new session:',error);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"chat-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"chat-list\",children:/*#__PURE__*/_jsx(ChatList,{sessions:sessions,selectSession:selectSession,startNewChat:startNewChat})}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-conversation\",children:[/*#__PURE__*/_jsx(ChatContent,{chatHistory:chatHistory}),/*#__PURE__*/_jsx(ChatInput,{sendMessage:sendMessage})]}),showItinerary&&/*#__PURE__*/_jsx(\"div\",{className:\"itinerary-container\",children:/*#__PURE__*/_jsx(\"h3\",{children:\"Itinerary Visualization\"})})]});}export default ChatPage;","map":{"version":3,"names":["React","useState","useEffect","useCallback","useUser","ChatContent","ChatInput","ChatList","jsx","_jsx","jsxs","_jsxs","ChatPage","sessions","setSessions","currentSession","setCurrentSession","chatHistory","setChatHistory","showItinerary","setShowItinerary","user","userId","password","fetchSessions","console","log","response","fetch","method","headers","body","JSON","stringify","ok","Error","concat","status","data","json","sortedSessions","map","session","date","Date","sort","a","b","message","error","selectSession","session_id","sendMessage","newMessage","isUser","updatedHistory","updateSessionHistory","apiUrl","user_id","query","text","aiResponse","prevHistory","includes","updatedSession","history","lastUpdated","prevSessions","id","startNewChat","topic","newSession","toISOString","className","children"],"sources":["/Users/connieshi/Documents/YoVenture_WebApp/frontend/src/pages/ChatPage.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useUser } from '../UserContext'; // 引入 useUser\nimport ChatContent from '../components/Chat/ChatContent';\nimport ChatInput from '../components/Chat/ChatInput';\nimport ChatList from '../components/Chat/ChatList';\nimport './ChatPage.css';\n\nfunction ChatPage() {\n  const [sessions, setSessions] = useState([]);\n  const [currentSession, setCurrentSession] = useState(null);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [showItinerary, setShowItinerary] = useState(false); // State to manage showing/hiding itinerary\n  const { user } = useUser(); // 获取用户信息\n  const userId = user?.userId; // 获取 userId\n  const password = user?.password; // 获取 userPassword\n  \n    const fetchSessions = useCallback(async () => {\n      try {\n        console.log('user_id', user);\n        console.log('password', user?.password);\n        const response = await fetch('/yv-get-user-sessions', {\n          method: 'POST',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            \"user_id\": userId,\n            \"password\": password,\n            \"passwordcheck\": 1,\n          })\n        });\n\n        if (!response.ok) {\n          throw new Error(`Failed to fetch sessions: ${response.status}`);\n        }\n\n        const data = await response.json();\n        if (data.status === 'success') {\n          const sortedSessions = data.sessions\n            .map(session => ({\n              ...session,\n              date: new Date(session.date)\n            }))\n            .sort((a, b) => b.date - a.date);\n          setSessions(sortedSessions);\n        } else {\n          throw new Error(`Failed to fetch sessions: ${data.message}`);\n        }\n      } catch (error) {\n        console.error('Error fetching sessions:', error);\n      }\n    }, [userId, password, user]);\n\n  useEffect(() => {\n      fetchSessions();\n  }, [fetchSessions]);\n  \n\n  const selectSession = async (session) => {\n    setCurrentSession(session);\n\n    console.log('session_id', session.session_id)\n    try {\n      const response = await fetch(`/yv-focus-session`, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          \"user_id\": userId,\n          \"session_id\": session.session_id,\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch session history: ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log('message',data[\"messages\"])\n      setChatHistory(data[\"messages\"]);\n\n      fetchSessions(); // 选择会话时重新获取会话列表\n    } catch (error) {\n      console.error('Error fetching session history:', error);\n    }\n  };\n\n  const sendMessage = async (message) => {\n    if (!currentSession) {\n      console.error('No session selected');\n      return;\n    }\n\n    const newMessage = { message, date: new Date(), isUser: true };\n    const updatedHistory = [...chatHistory, newMessage];\n    setChatHistory(updatedHistory);\n    updateSessionHistory(updatedHistory);\n\n    const apiUrl = '/yv-query-stream'; // 将要请求的URL存储在变量中\n\n    try {\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'accept': 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          user_id: userId, // 替换为实际的用户ID\n          session_id: currentSession.session_id, // 使用当前选择的会话ID\n          query: message,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.text();\n      const aiResponse = {\n        message: data, // Adjust according to the actual response structure\n        date: new Date(),\n        isUser: false,\n      };\n\n      setChatHistory((prevHistory) => [...prevHistory, aiResponse]);\n      updateSessionHistory([...updatedHistory, aiResponse]);\n\n      // Check for itinerary trigger in AI response (example condition)\n      if (data.includes('place of interest') || data.includes('itinerary')) {\n        setShowItinerary(true); // Show itinerary container on specific triggers\n      }\n    } catch (error) {\n      console.error('Error fetching AI response:', error);\n    }\n  };\n\n  const updateSessionHistory = (updatedHistory) => {\n    const updatedSession = {\n      ...currentSession,\n      history: updatedHistory,\n      lastUpdated: new Date(),\n    };\n    setSessions((prevSessions) =>\n      prevSessions\n        .map((session) =>\n          session.id === updatedSession.id ? updatedSession : session\n        )\n        .sort((a, b) => new Date(b.lastUpdated) - new Date(a.lastUpdated)) // Sort sessions by lastUpdated in descending order\n    );\n  };\n\n\n  const startNewChat = async () => {\n    const apiUrl = '/yv-new-session'; // 将要请求的URL存储在变量中\n    try {\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'accept': 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          user_id: userId, // 替换为实际的用户ID\n          topic: '',\n        }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const newSession = {\n        session_id: data.session_id,\n        date: new Date().toISOString(),\n        topic: '',\n      };\n      setSessions((prevSessions) => [newSession, ...prevSessions].sort((a, b) => new Date(b.date) - new Date(a.date)));\n      setCurrentSession(newSession);\n      setChatHistory([]);\n      setShowItinerary(false); // Reset itinerary view on new chat\n    } catch (error) {\n    console.error('Error creating new session:', error);\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"chat-list\">\n        <ChatList sessions={sessions} selectSession={selectSession} startNewChat={startNewChat} />\n      </div>\n      <div className=\"chat-conversation\">\n        <ChatContent chatHistory={chatHistory} />\n        <ChatInput sendMessage={sendMessage} />\n      </div>\n      {showItinerary && (\n        <div className=\"itinerary-container\">\n          {/* Render your itinerary visualization component here */}\n          <h3>Itinerary Visualization</h3>\n          {/* Add your itinerary visualization content based on the ongoing conversation */}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default ChatPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}